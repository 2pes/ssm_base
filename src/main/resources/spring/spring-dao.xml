<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context.xsd">
    <!-- 配置整合mybatis过程 -->
    <!-- 1.配置数据库相关参数properties的属性：${url} -->
    <context:property-placeholder
            location="classpath:jdbc.properties"/>

    <!-- 2.数据库连接池 -->
    <bean id="dataSource"
          class="com.alibaba.druid.pool.DruidDataSource">
        <!-- 配置连接池属性 -->
        <property name="driverClassName" value="${jdbc.driver}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <!-- 配置监控统计拦截的filters -->
        <!-- <property name="filters" value="stat" /> -->
        <!-- 连接池最大值 -->
        <property name="maxActive" value="${druid.maxActive}"/>
        <!-- 初始化大小 -->
        <property name="initialSize" value="${druid.initialSize}"/>
        <!-- 获取连接最大等待时间 -->
        <property name="maxWait" value="${druid.maxWait}"/>
        <!-- 连接池最小空闲 -->
        <!-- <property name="minIdle" value="1" /> -->
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis"
                  value="${druid.timeBetweenEvictionRunsMillis}"/>
        <property name="validationQuery"
                  value="${druid.validationQuery}"/>
        <property name="validationQueryTimeout"
                  value="${druid.validationQueryTimeout}"/>
        <property name="testWhileIdle" value="${druid.testWhileIdle}"/><!--空闲时是否进行验证，检查对象是否有效 -->
        <property name="testOnBorrow" value="${druid.testOnBorrow}"/><!--取得对象时是否进行验证，检查对象是否有效 -->
        <property name="testOnReturn" value="${druid.testOnReturn}"/><!--返回对象时是否进行验证 -->
        <property name="removeAbandoned"
                  value="${druid.removeAbandoned}"/>
        <property name="removeAbandonedTimeout"
                  value="${druid.removeAbandonedTimeout}"/>
        <property name="logAbandoned" value="${druid.logAbandoned}"/>
        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 oracle=true mysql=false -->
        <property name="poolPreparedStatements"
                  value="${druid.poolPreparedStatements}"/><!-- 表明是否开启statement cache，默认为false，也就是不开启 -->
        <property name="maxPoolPreparedStatementPerConnectionSize"
                  value="${druid.maxPoolPreparedStatementPerConnectionSize}"/>
        <!-- 配置监控统计拦截的filters -->
        <property name="filters" value="${druid.filters}"/><!-- 配置监控统计拦截的filters，去掉后监控界面sql无法统计 -->
    </bean>

    <!-- 3.配置SqlSessionFactory对象 -->
    <bean id="sqlSessionFactory"
          class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 注入数据库连接池 -->
        <property name="dataSource" ref="dataSource"/>
        <!-- 配置MyBaties全局配置文件:mybatis-config.xml -->
        <property name="configLocation"
                  value="classpath:mybatis-config.xml"/>
        <!-- 扫描entity包 使用别名 -->
        <!-- <property name="typeAliasesPackage" value="com.company.project.model"
            /> -->
        <!-- 扫描sql配置文件:mapper需要的xml文件 -->
        <property name="mapperLocations"
                  value="classpath:mapper/**/*.xml"/>
    </bean>

    <!-- 4.配置扫描Dao接口包，动态实现Dao接口，注入到spring容器中 -->
    <bean class="tk.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- 注入sqlSessionFactory -->
        <property name="sqlSessionFactoryBeanName"
                  value="sqlSessionFactory"/>
        <!-- 给出需要扫描Dao接口包 -->
        <property name="basePackage"
                  value="com.company.project.module.**.dao"/>
        <property name="properties">
            <value>
                mappers=com.company.project.core.Mapper
            </value>
        </property>
    </bean>


</beans>